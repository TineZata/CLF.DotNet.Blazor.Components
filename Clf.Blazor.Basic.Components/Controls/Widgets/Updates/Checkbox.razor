@using Clf.Blazor.Basic.Components.Controls.Helpers
@using Clf.Blazor.Basic.Components.Controls.Models
@* @using Clf.Blazor.Basic.Components.Controls.Widgets.Helpers *@
@using Microsoft.AspNetCore.Components.Web
@* @using Clf.Blazor.Basic.Components.Controls.Widgets.Containers *@
@using Convergence

@inherits PVWidgetBase
@implements IDisposable

@if (IsVisible)
{
	<Alarm BorderStatus="@PVBorderStatus" ContentDisabledTooltip="@(ShowTooltip? TooltipText:string.Empty)" IsContentDisabled="@PVIsDisabled">
		<Tooltip Text="@(ShowTooltip? TooltipText:string.Empty)">
			<label class="check-box-label @Class" disabled="@PVGetDisableStatus()"
				   style="--check-box-width:@GetCheckBoxWidth(); --check-box-height:@GetCheckBoxHeight();">
				<input type="checkbox"
					   disabled="@PVGetDisableStatus()"
					   @bind="@Value"
					   @onclick="OnBooleanWidgetClicked">
				</input>
				@Label
			</label>
		</Tooltip>
	</Alarm>
}

@code
{
	[Parameter]
	public string Label { get; set; } = "Checkbox";

	private bool Value { get; set; }

	private async void OnBooleanWidgetClicked()
	{
		Value = !Value;
		await Convergence.IO.EPICS.CA.Wrapper.CaputAsync(PVName, Value, typeof(bool));
	}

	protected override async Task OnInitializedAsync()
	{
		this.Width = this.Width == 0 ? CheckboxStyle.DEFAULT_WIDTH : this.Width;
		this.Height = this.Height == 0 ? CheckboxStyle.DEFAULT_HEIGHT : this.Height;

		if (!string.IsNullOrEmpty(PVName) && this.TaskConnect().Result == EndPointStatus.Okay)
		{	
			var value = await Convergence.IO.EPICS.CA.Wrapper.CagetAsync(PVName, typeof(bool));
			if (value != null)
				Value = (bool)value.Value!;
		}
	}

	private string GetCheckBoxWidth()
	{
		return Width != 0 ? $"{Width}px" : "max-content";
	}

	private string GetCheckBoxHeight()
	{
		return Height != 0 ? $"{Height}px" : "var(--clf-check-box-default-height)";
	}

	void IDisposable.Dispose()
	{
		Convergence.IO.EPICS.CA.Wrapper.Disconnect(PVName);
	}
}