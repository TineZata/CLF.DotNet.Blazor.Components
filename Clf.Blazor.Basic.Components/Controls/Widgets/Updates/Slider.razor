@using Clf.Blazor.Basic.Components.Controls.Helpers
@using Clf.Blazor.Basic.Components.Controls.Models
@using Clf.Blazor.Basic.Components.Controls.Widgets.Helpers
@using Clf.Common.Arithmatic;
@using Convergence
@using Microsoft.AspNetCore.Components.Web
@using Clf.Blazor.Basic.Components.Controls.Widgets.Containers
@inherits PVWidgetBase
@implements IDisposable


@if (IsVisible)
{
	<Alarm BorderStatus="@PVBorderStatus" ContentDisabledTooltip="@(ShowTooltip?TooltipText:string.Empty)" IsContentDisabled="@PVIsDisabled">
		<div class="slider-wrapper @Class" style="--slider-width:@GetWidth(); --slider-height:@GetHeight();
                    --slider-selected-percentage:@($"{DraggedPercentage}%");">
			<Tooltip Text="@(ShowTooltip? TooltipText:string.Empty)">
				<div class="range @RangeClass" disabled=@PVGetDisableStatus() show-ticks="@ShowTicks" style="--step: @TickInterval; --min:@Minimum; --max:@Maximum; --value:@DraggedValue;">
					<input type="range"
						   min="@Minimum"
						   max="@Maximum"
						   value="@Value"
						   step="@Increment"
						   disabled=@PVGetDisableStatus()
						   list="tick-marks"
						   @oninput="UpdateSelectedPercentage"
						   @onchange="OnSliderValueChangeAsync" />
					@if (ShowValue)
					{
						<output>@DraggedValue</output>
					}
				</div>
			</Tooltip>
			@if (ShowSpinner)
			{
				<div @onkeydown="OnSpinnerKeyDown">
					<Spinner class="@($"slider-value {SpinnerClass}")" PVName="@PVName" Increment="@Increment" />
				</div>
			}
		</div>
	</Alarm>
}

@code {

	[Parameter]
	public string SpinnerClass { get; set; } = "";
	[Parameter]
	public string RangeClass { get; set; } = "";
	[Parameter]
	public bool ShowSpinner { get; set; } = false;
	[Parameter]
	public bool ShowValue { get; set; } = false;
	[Parameter]
	public double Minimum { get; set; } = 0;
	[Parameter]
	public double Maximum { get; set; } = 100;
	[Parameter]
	public double Increment { get; set; } = 1;
	[Parameter]
	public double Value { get; set; } = 0;
	[Parameter]
	public bool ShowTicks { get; set; } = false;
	[Parameter]
	public double TickInterval { get; set; } = 10;

	public double DraggedValue { get; set; }
	public int DraggedPercentage => (int)Math.Floor((DraggedValue - Minimum) / (Maximum - Minimum) * 100);

	private async void OnSliderValueChangeAsync(ChangeEventArgs e)
	{
		// Send the value with Wrapper.CaputAsync
		await Convergence.IO.EPICS.CA.Wrapper.CaputAsync(PVName, DraggedValue, typeof(double));
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		SetValuePercentage(Value);
	}

	protected override async Task OnInitializedAsync()
	{
		// Set the default width and height
		this.Width = this.Width == 0 ? SliderStyle.DEFAULT_WIDTH : this.Width;
		this.Height = this.Height == 0 ? SliderStyle.DEFAULT_HEIGHT : this.Height;

		// Check PVName is not null and Connect to the PV
		if (!string.IsNullOrEmpty(PVName) && this.TaskConnect(monitorConnectionChange: true).Result == EndPointStatus.Okay)
		{
			Maximum = this.TaskHOPR().Result;
			Minimum = this.TaskLOPR().Result;
			// Get the value using Wrapper.CagetAsync
			var rbv = await Convergence.IO.EPICS.CA.Wrapper.CagetAsync(PVName, typeof(double));
			if (rbv.Status == EndPointStatus.Okay)
			{
				Value = Convert.ToDouble(rbv.Value);
			}
		}
	}

	private void UpdateSelectedPercentage(ChangeEventArgs e)
	{
		SetValuePercentage(Converters.GetDoubleFromObject(e.Value));
	}

	private void SetValuePercentage(double value)
	{
		DraggedValue = value;
		Value = DraggedValue;
	}

	public async Task OnSpinnerKeyDown(KeyboardEventArgs e)
	{
		if ((e.Code == "Enter" || e.Code == "NumpadEnter"))
		{
			// Send the value with Wrapper.CaputAsync
			await Convergence.IO.EPICS.CA.Wrapper.CaputAsync(PVName, DraggedValue, typeof(double));
		}
	}

	private string GetWidth()
	{
		return Width != 0 ? $"{Width}px" : "var(--clf-slider-default-width)";
	}

	private string GetHeight()
	{
		return Height != 0 ? $"{Height}px" : "var(--clf-slider-default-height)";
	}

	void IDisposable.Dispose()
	{
		// Disconnect the PV using Wrapper.Disconnect
		Convergence.IO.EPICS.CA.Wrapper.Disconnect(PVName);
	}
}
