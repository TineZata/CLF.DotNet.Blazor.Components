@using Convergence
@using Clf.Blazor.Basic.Components.Controls.Models
@using Clf.Blazor.Basic.Components.Controls.Widgets.Containers
@using Clf.Blazor.Basic.Components.Controls.Widgets.Helpers
@using Microsoft.AspNetCore.Components.Web
@using Clf.Blazor.Basic.Components.Controls.Helpers
@using System.ComponentModel
@using System.Runtime.InteropServices
@inherits PVWidgetBase
@implements IDisposable

@if (IsVisible)
{
  <Alarm BorderStatus="@PVBorderStatus" ContentDisabledTooltip="@(ShowTooltip? TooltipText:string.Empty)" IsContentDisabled="@PVIsDisabled">
    @if (IsMultiLine)
    {
      <Tooltip Text="@(ShowTooltip? TooltipText:string.Empty)">
        <textarea class="text-area @Class"
            style="--text-input-width:@GetWidth(); --text-input-height:@GetHeight()"
            disabled="@ShowTooltip"
            @bind="Text" @bind:event="oninput" @onkeydown="@OnKeyDownAsync" />
      </Tooltip>
    }
    else
    {
      <Tooltip Text="@(ShowTooltip? TooltipText:string.Empty)">
        <div class="text-entry @Class" style="--text-input-width:@GetWidth(); --text-input-height:@GetHeight()">
            <input class="text-input" type="text" disabled="@ShowTooltip" show-units="@GetShowUnits()" @bind="Text" @bind:event="oninput" @onkeydown="@OnKeyDownAsync" />
          @if (GetShowUnits())
          {
            <span class="clf-units" disabled="@ShowUnits">@Units</span>
          }
        </div>
      </Tooltip>
    }
  </Alarm>
}

@code
{
    [Parameter]
    public string Text { get; set; } = string.Empty;
    [Parameter]
    public string Units { get; set; } = string.Empty;
    [Parameter]
    public bool ShowUnits { get; set; } = false;
    [Parameter]
    public bool IsMultiLine { get; set; } = false;
    [Parameter]
    public int Precision { get; set; } = -1;
    [Parameter]
    public bool IsDisabledOnEnter { get; set; } = false;
    [Parameter]
    public bool WaitForAcknowledgement { get; set; } = false;

    private string _previousValue = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        if (PVName != string.Empty)
        {
            this.Width = this.Width == 0 ? TextEntryStyle.DEFAULT_WIDTH : this.Width;
            this.Height = this.Height == 0 ? TextEntryStyle.DEFAULT_HEIGHT : this.Height;
            if (this.TaskConnect(monitorConnectionChange:true).Result == EndPointStatus.Okay)
			{
				Precision = this.TaskGetPREC().Result;
				if (ShowUnits) Units = this.TaskGetUnits().Result;
			}
		}
        
    }

    private bool GetShowUnits()
    {
        return (!string.IsNullOrEmpty(Units) && ShowUnits);
    }

    private string GetWidth()
    {
        return Width != 0 ? $"{Width}px" : "var(--clf-text-entry-default-width)";
    }

    private string GetHeight()
    {
        return Height != 0 ? $"{Height}px" : "var(--clf-text-entry-default-height)";
    }


    void IDisposable.Dispose()
    {
        Convergence.IO.EPICS.CA.Wrapper.Disconnect(PVName);
    }

    public async Task OnKeyDownAsync(KeyboardEventArgs e)
    {
        //only try to write to the PV if Connected and "Enter" key is pressed
        if (PVBorderStatus == BorderStatus.Connected && (e.Code == "Enter" || e.Code == "NumpadEnter"))
        {
            // Do CaPutAsync with a callback to update the value
            var result = await Convergence.IO.EPICS.CA.Wrapper.CaputAsync(PVName, Text, typeof(string));
            // Do a CaGetAsync to check if the value was written
            var rbv = await Convergence.IO.EPICS.CA.Wrapper.CagetAsync(PVName, typeof(string));
            if (rbv.Value as string == Text)
                _previousValue = Text;
            else
                Text = _previousValue;
        }
    }
}