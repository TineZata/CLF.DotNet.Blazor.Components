@using Clf.Blazor.Basic.Components.Controls.Helpers
@using Clf.Blazor.Basic.Components.Controls.Models
@* @using Clf.Blazor.Basic.Components.Controls.Widgets.Containers
@using Clf.Blazor.Basic.Components.Controls.Widgets.Helpers *@
@using Microsoft.AspNetCore.Components.Web
@using System.Text;
@using Convergence
@using Clf.Common.ImageProcessing

@inherits PVWidgetBase
@implements IDisposable

@if (IsVisible)
{
	<Alarm BorderStatus="@PVBorderStatus" ContentDisabledTooltip="@(ShowTooltip? TooltipText:string.Empty)" IsContentDisabled="@PVIsDisabled">
		<Tooltip Text="@(ShowTooltip? TooltipText:string.Empty)">
			<button class="boolean-button @Class"
					style=" background-color:@GetBackgroundColour(); --boolean-button-width: @GetWidth();
                    --boolean-button-height: @GetHeight(); --boolean-button-color: @GetColour();"
					@onclick="OnBooleanWidgetClicked"
					disabled="@PVGetDisableStatus()">

				@if (Value == true)
				{
					@if (ButtonOn != null)
					{
						@ButtonOn
					}
					else
					{
						@OnLabel
					}
				}
				else
				{
					@if (ButtonOff != null)
					{
						@ButtonOff
					}
					else
					{
						@OffLabel
					}
				}
			</button>
		</Tooltip>
	</Alarm>
}

@code {


	[Parameter]
	public RenderFragment? ButtonOn { get; set; }

	[Parameter]
	public RenderFragment? ButtonOff { get; set; }

	[Parameter]
	public string OnLabel { get; set; } = "On";

	[Parameter]
	public string OffLabel { get; set; } = "Off";

	[Parameter]
	public Colour? OnColor { get; set; }

	[Parameter]
	public Colour? OffColor { get; set; }

	private bool Value { get; set; }

	private async void OnBooleanWidgetClicked()
	{
		Value = !Value;
		await Convergence.IO.EPICS.CA.Wrapper.CaputAsync(PVName, Value, typeof(bool));
	}

	protected override async Task OnInitializedAsync()
	{
		this.Width = this.Width == 0 ?  BooleanButtonStyle.DEFAULT_WIDTH : this.Width;
		this.Height = this.Height == 0 ? BooleanButtonStyle.DEFAULT_HEIGHT : this.Height;

		if (!string.IsNullOrEmpty(PVName) && this.TaskConnect().Result == EndPointStatus.Okay)
		{
			var value = await Convergence.IO.EPICS.CA.Wrapper.CagetAsync(PVName, typeof(bool));
			if (value != null)
				Value = (bool)value.Value!;
		}
	}

	private string GetWidth()
	{
		return Width != 0 ? $"{Width}px" : "var(--clf-boolean-button-default-width)";
	}

	private string GetHeight()
	{
		return Height != 0 ? $"{Height}px" : "var(--clf-boolean-button-default-height)";
	}


	private string GetBackgroundColour()
	{
		return (Value == true ?
					OnColor != null ? OnColor.HtmlRgbaString : GetCssVariableForBooleanButtonBackgroundColour(true)
				:	OffColor != null ? OffColor.HtmlRgbaString : GetCssVariableForBooleanButtonBackgroundColour(false));
	}

	private string GetColour()
	{
		if (Value == true)
		{
			return "var(--clf-boolean-button-on-colour)";
		}
		else
		{
			return "var(--clf-boolean-button-off-colour)";
		}
	}

	private string GetCssVariableForBooleanButtonBackgroundColour(bool value)
	{
		if (value == true)
		{
			return "var(--clf-boolean-button-background-on-colour)";
		}
		else
		{
			return "var(--clf-boolean-button-background-off-colour)";
		}
	}

	void IDisposable.Dispose()
	{
		Convergence.IO.EPICS.CA.Wrapper.Disconnect(PVName);
	}
}